// Generated by CoffeeScript 1.9.3
(function() {
  var assert, url;

  assert = chai.assert;

  url = function(path) {
    return "http://localhost:4567/" + path;
  };

  describe("GET Requests", function() {
    var http, r;
    http = new HTTPromise;
    r = function(path, params) {
      if (path == null) {
        path = "test";
      }
      return http.get(url(path), params);
    };
    it("should get '/test'", function(done) {
      return r().then(function(data, xhr) {
        assert.equal(xhr.status, 200);
        return done();
      });
    });
    it("should trigger success after /test", function(done) {
      return r().success(function(data, xhr) {
        assert.ok(true);
        return done();
      });
    });
    it("should trigger when 200 after /test", function(done) {
      return r().when(200, function(data, xhr) {
        assert(true);
        return done();
      });
    });
    it("should trigger error on response not in 200 range", function(done) {
      return r('500').error(function(data, xhr) {
        assert(true);
        return done();
      });
    });
    it("should return data, xhr for success", function(done) {
      return r().success(function(data, xhr) {
        assert(data);
        assert(xhr);
        return done();
      });
    });
    it("should return data, xhr for error", function(done) {
      return r('500').error(function(data, xhr) {
        assert(data);
        assert(xhr);
        return done();
      });
    });
    return it("should send URL params", function(done) {
      return r('test', {
        foo: 'bar'
      }).then(function(data, xhr) {
        assert.deepEqual(data, {
          echo: {
            foo: 'bar'
          }
        });
        return done();
      });
    });
  });

  describe("Configuration", function() {
    it("should configurable to add a header", function(done) {
      var http;
      http = new HTTPromise({
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      });
      return http.get(url('/xhr')).then(function(data, xhr) {
        console.log(xhr);
        assert.equal(200, xhr.status);
        return done();
      });
    });
    return it("should give a useful error message with improper header", function(done) {
      var http, test;
      http = new HTTPromise({
        headers: 'XMLHttpRequest'
      });
      console.log("config:", http.config);
      test = function() {
        return http.get(url('/xhr'));
      };
      assert.throws(test, TypeError);
      return done();
    });
  });

  describe("POST Requests", function() {
    var http, r;
    http = new HTTPromise;
    r = function(path, data) {
      if (path == null) {
        path = "test";
      }
      return http.post(url(path), data);
    };
    return it("should send URL params", function(done) {
      return r('test', {
        foo: 'bar'
      }).then(function(data, xhr) {
        assert.deepEqual(data, {
          echo: {
            foo: 'bar'
          }
        });
        return done();
      });
    });
  });

  describe("PUT Requests", function() {
    var http, r;
    http = new HTTPromise;
    r = function(path, data) {
      if (path == null) {
        path = "test";
      }
      return http.put(url(path), data);
    };
    return it("should send URL params", function(done) {
      return r('test', {
        foo: 'bar'
      }).then(function(data, xhr) {
        assert.deepEqual(data, {
          echo: {
            foo: 'bar'
          }
        });
        return done();
      });
    });
  });

  describe("PATCH Requests", function() {
    var http, r;
    http = new HTTPromise;
    r = function(path, data) {
      if (path == null) {
        path = "test";
      }
      return http.patch(url(path), data);
    };
    return it("should send URL params", function(done) {
      return r('test', {
        foo: 'bar'
      }).then(function(data, xhr) {
        assert.deepEqual(data, {
          echo: {
            foo: 'bar'
          }
        });
        return done();
      });
    });
  });

  describe("DELETE Requests", function() {
    var http, r;
    http = new HTTPromise;
    r = function(path, data) {
      if (path == null) {
        path = "test";
      }
      return http["delete"](url(path), data);
    };
    return it("should delete stuff", function(done) {
      return r('test').then(function(data, xhr) {
        assert.equal(xhr.status, 200);
        return done();
      });
    });
  });

  describe("FormData adapter", function() {
    var withForm;
    withForm = function(callback) {
      var div, formHTML;
      formHTML = "<form id=\"test-form\">\n  <input id=\"a\" type=\"text\" name=\"input[a]\" value=\"Hello\"></input>\n  <input id=\"b\" type=\"text\" name=\"input[b]\" value=\"World\"></input>\n  <button>Submit</button>\n</form>";
      div = document.createElement('div');
      div.innerHTML = formHTML;
      document.body.appendChild(div);
      callback();
      return div.remove();
    };
    it("should setup a test form correctly", function() {
      return withForm(function() {
        var a, b;
        a = document.getElementById('a');
        b = document.getElementById('b');
        assert.equal('Hello', a.value);
        return assert.equal('World', b.value);
      });
    });
    it("should serialize form data correctly", function(done) {
      var http;
      http = new HTTPromise({
        type: 'formData'
      });
      return withForm(function() {
        var request;
        request = http.post(url('formdata'), document.getElementById('test-form'));
        return request.then(function(data, xhr) {
          var d;
          assert.equal(xhr.status, 200);
          d = JSON.parse(xhr.response);
          assert.equal("Hello", d.input.a);
          assert.equal("World", d.input.b);
          return done();
        });
      });
    });
    return it("should work with a form selector", function(done) {
      var http;
      http = new HTTPromise({
        type: 'formData'
      });
      return withForm(function() {
        var request;
        request = http.post(url('formdata'), '#test-form');
        return request.then(function(data, xhr) {
          var d;
          assert.equal(xhr.status, 200);
          d = JSON.parse(xhr.response);
          assert.equal("Hello", d.input.a);
          assert.equal("World", d.input.b);
          return done();
        });
      });
    });
  });

}).call(this);
